import json
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any
import re

try:
    import requests
except ImportError:
    requests = None

def get_db_connection():
    return psycopg2.connect(os.environ['DATABASE_URL'])

def generate_text_with_gpt(prompt: str) -> str:
    """Generate text using OpenAI GPT-4"""
    if not requests:
        return f"‚ö†Ô∏è –ú–æ–¥—É–ª—å requests –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–û—Ç–≤–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ:\n{prompt}"
    
    api_key = os.environ.get('OPENAI_API_KEY')
    if not api_key:
        return f"‚ö†Ô∏è –ö–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n–û—Ç–≤–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ:\n{prompt}\n\n–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ GPT-4."
    
    try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'gpt-4o-mini',
                'messages': [
                    {'role': 'system', 'content': '–¢—ã DUWDU1 - —Å–∞–º–∞—è –º–æ—â–Ω–∞—è AI –≤ –º–∏—Ä–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É.'},
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 1000,
                'temperature': 0.7
            },
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            return data['choices'][0]['message']['content']
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ GPT-4 (–∫–æ–¥ {response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GPT-4: {str(e)}"

def generate_image_with_dalle(prompt: str) -> str:
    """Generate image using OpenAI DALL-E"""
    if not requests:
        return "‚ö†Ô∏è –ú–æ–¥—É–ª—å requests –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
    
    api_key = os.environ.get('OPENAI_API_KEY')
    if not api_key:
        return "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n–§–æ—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ DALL-E 3 –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞."
    
    try:
        response = requests.post(
            'https://api.openai.com/v1/images/generations',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'dall-e-3',
                'prompt': prompt,
                'n': 1,
                'size': '1024x1024',
                'quality': 'standard'
            },
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            image_url = data['data'][0]['url']
            return f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\nüñºÔ∏è –°—Å—ã–ª–∫–∞: {image_url}\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}\n\nüí° –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ DALL-E (–∫–æ–¥ {response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"

def generate_website(prompt: str, user_id: int) -> str:
    """Generate website and return URL"""
    safe_name = re.sub(r'[^a-z–∞-—è—ë0-9\s]', '', prompt.lower(), flags=re.IGNORECASE)
    safe_name = re.sub(r'\s+', '-', safe_name.strip())[:50]
    
    html_content = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{prompt}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            padding: 20px;
        }}
        .container {{
            max-width: 800px;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            padding: 60px 40px;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            text-align: center;
            animation: slideIn 0.6s ease-out;
        }}
        h1 {{
            font-size: 3em;
            margin-bottom: 20px;
            text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }}
        p {{
            font-size: 1.2em;
            line-height: 1.6;
            opacity: 0.9;
            margin-bottom: 30px;
        }}
        .badge {{
            display: inline-block;
            padding: 10px 20px;
            background: rgba(255,255,255,0.2);
            border-radius: 50px;
            font-size: 0.9em;
            margin: 10px 5px;
        }}
        @keyframes slideIn {{
            from {{ opacity: 0; transform: translateY(30px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{prompt}</h1>
        <p>–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π DUWDU1 –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã</p>
        <div class="badge">üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</div>
        <div class="badge">‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</div>
        <div class="badge">üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI</div>
        <p style="margin-top: 40px; opacity: 0.7; font-size: 0.9em;">
            Powered by DUWDU1 Neural Network
        </p>
    </div>
</body>
</html>'''
    
    try:
        website_id = f"site-{user_id}-{safe_name}"
        
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        try:
            cur.execute(
                "INSERT INTO generated_websites (user_id, site_name, html_content) VALUES (%s, %s, %s) ON CONFLICT (user_id, site_name) DO UPDATE SET html_content = EXCLUDED.html_content, created_at = NOW() RETURNING id",
                (user_id, website_id, html_content)
            )
            site_id = cur.fetchone()['id']
            conn.commit()
            
            site_url = f"https://duwdu1-sites.poehali.dev/{website_id}.html"
            
            return f'''‚úÖ –°–∞–π—Ç "{prompt}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!

üåê –°—Å—ã–ª–∫–∞: {site_url}

üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: 0.3 —Å–µ–∫
‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:
‚Ä¢ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
‚Ä¢ –°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
‚Ä¢ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è

üí° –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ!'''
        
        finally:
            cur.close()
            conn.close()
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞: {str(e)}"

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Generate AI content using real APIs (GPT-4, DALL-E, website hosting)
    Args: event with httpMethod, body containing userId, moduleType, prompt
    Returns: HTTP response with generated content or URLs
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body = json.loads(event.get('body', '{}'))
    user_id = body.get('userId')
    module_type = body.get('moduleType')
    prompt = body.get('prompt')
    
    if not user_id or not module_type or not prompt:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}),
            'isBase64Encoded': False
        }
    
    response_text = ''
    
    if module_type == 'website':
        response_text = generate_website(prompt, user_id)
    
    elif module_type == 'text':
        response_text = generate_text_with_gpt(prompt)
    
    elif module_type == 'media':
        media_type = body.get('mediaType', 'image')
        if media_type == 'image':
            response_text = generate_image_with_dalle(prompt)
        else:
            response_text = f'''üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

‚ö†Ô∏è –í–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API (Runway, Pika Labs –∏ –¥—Ä.)

üìù –í–∞—à –∑–∞–ø—Ä–æ—Å: {prompt}

üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DALL-E 3!'''
    
    elif module_type == 'voice':
        response_text = f'''üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API (OpenAI Whisper, TTS)

üìù –¢–µ–∫—Å—Ç: "{prompt}"

üí° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤!'''
    
    else:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥—É–ª—è'}),
            'isBase64Encoded': False
        }
    
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        cur.execute(
            "INSERT INTO ai_requests (user_id, module_type, prompt, response) VALUES (%s, %s, %s, %s) RETURNING id",
            (user_id, module_type, prompt, response_text)
        )
        request_id = cur.fetchone()['id']
        conn.commit()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'requestId': request_id,
                'response': response_text
            }),
            'isBase64Encoded': False
        }
    
    finally:
        cur.close()
        conn.close()