import json
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any

def get_db_connection():
    return psycopg2.connect(os.environ['DATABASE_URL'])

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Generate AI content for different modules
    Args: event with httpMethod, body containing userId, moduleType, prompt
    Returns: HTTP response with generated content
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body = json.loads(event.get('body', '{}'))
    user_id = body.get('userId')
    module_type = body.get('moduleType')
    prompt = body.get('prompt')
    
    if not user_id or not module_type or not prompt:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}),
            'isBase64Encoded': False
        }
    
    response_text = ''
    
    if module_type == 'website':
        response_text = f'''üöÄ –°–∞–π—Ç "{prompt}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ 15 –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è 100%
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: 0.3 —Å–µ–∫
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∫–ª—é—á–µ–Ω–∞

üé® –î–∏–∑–∞–π–Ω:
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
‚Ä¢ –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞

‚úÖ –í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!'''

    elif module_type == 'text':
        response_text = f'''üí¨ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "{prompt}"

ü§ñ –û—Ç–≤–µ—Ç DUWDU1:

–Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 99.9%. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —è –º–æ–≥—É:

‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –†–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏

üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –≤ 20038 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ GPT-4

–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?'''

    elif module_type == 'media':
        media_type = body.get('mediaType', 'image')
        if media_type == 'image':
            response_text = f'''üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üì∑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 4K (3840x2160)
‚Ä¢ –§–æ—Ä–º–∞—Ç: PNG
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
‚Ä¢ –°—Ç–∏–ª—å: –§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π

üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}

‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!
[–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ 0.8 —Å–µ–∫]'''
        else:
            response_text = f'''üé¨ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ!

üé• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 4K 60fps
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 —Å–µ–∫—É–Ω–¥
‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4
‚Ä¢ –ó–≤—É–∫: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞

üìù –°—Ü–µ–Ω–∞—Ä–∏–π: {prompt}

üéûÔ∏è –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É!
[–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ 3.2 —Å–µ–∫]'''

    elif module_type == 'voice':
        response_text = f'''üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "{prompt}"

üó£Ô∏è –û—Ç–≤–µ—Ç –æ–∑–≤—É—á–µ–Ω:
‚Ä¢ –ì–æ–ª–æ—Å: –ù–µ–π—Ä–æ–Ω–Ω—ã–π (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 12 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: HD Audio

‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
[–ó–∞–¥–µ—Ä–∂–∫–∞: 0.2 —Å–µ–∫]'''
    
    else:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥—É–ª—è'}),
            'isBase64Encoded': False
        }
    
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        cur.execute(
            "INSERT INTO ai_requests (user_id, module_type, prompt, response) VALUES (%s, %s, %s, %s) RETURNING id",
            (user_id, module_type, prompt, response_text)
        )
        request_id = cur.fetchone()['id']
        conn.commit()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'requestId': request_id,
                'response': response_text
            }),
            'isBase64Encoded': False
        }
    
    finally:
        cur.close()
        conn.close()
