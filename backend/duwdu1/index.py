import json
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any

def get_db_connection():
    """Get database connection"""
    dsn = os.environ.get('DATABASE_URL')
    return psycopg2.connect(dsn, cursor_factory=RealDictCursor)

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: DUWDU - –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–∫–≤–æ–∑—å –≤—Ä–µ–º—è. –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –æ–±—É—á–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥–æ–ª–æ—Å–∞
    Args: event with httpMethod, body with module, prompt/text
    Returns: HTTP response with AI-generated content
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body = json.loads(event.get('body', '{}'))
    module = body.get('module', 'text')
    
    if module == 'text':
        return handle_text_ai(body)
    elif module == 'webgen':
        return handle_website_generation(body)
    elif module == 'imaging':
        return handle_image_generation(body)
    elif module == 'voice':
        return handle_voice_synthesis(body)
    else:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Invalid module'})
        }

def handle_text_ai(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Text AI - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    prompt = body.get('prompt', '').strip()
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT answer, source, used_count FROM duwdu_knowledge WHERE LOWER(question) = LOWER(%s)",
            (prompt,)
        )
        result = cur.fetchone()
        
        if result:
            cur.execute(
                "UPDATE duwdu_knowledge SET used_count = used_count + 1 WHERE LOWER(question) = LOWER(%s)",
                (prompt,)
            )
            conn.commit()
            
            answer = result['answer']
            source = result['source']
            used_count = result['used_count'] + 1
            
            cur.close()
            conn.close()
            
            return {
                'statusCode': 200,
                'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
                'body': json.dumps({
                    'response': answer,
                    'source': source,
                    'learned': True,
                    'used_times': used_count
                })
            }
        
        prompt_lower = prompt.lower()
        answer = ''
        source = 'internet_search'
        
        if '–∫–∞—à–∞' in prompt_lower and ('–≥—Ä–µ—á–Ω–µ–≤–∞—è' in prompt_lower or '–º–æ–ª–æ—á–Ω–∞—è' in prompt_lower):
            answer = """–ì—Ä–µ—á–Ω–µ–≤–∞—è –º–æ–ª–æ—á–Ω–∞—è –∫–∞—à–∞ - —Ä–µ—Ü–µ–ø—Ç:

1. –í–æ–∑—å–º–∏—Ç–µ 1 —Å—Ç–∞–∫–∞–Ω –≥—Ä–µ—á–∫–∏, –ø—Ä–æ–º–æ–π—Ç–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π
2. –í –∫–∞—Å—Ç—Ä—é–ª–µ –≤—Å–∫–∏–ø—è—Ç–∏—Ç–µ 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã, –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä–µ—á–∫—É
3. –í–∞—Ä–∏—Ç–µ 10 –º–∏–Ω—É—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ
4. –î–æ–±–∞–≤—å—Ç–µ 2 —Å—Ç–∞–∫–∞–Ω–∞ –º–æ–ª–æ–∫–∞, —â–µ–ø–æ—Ç–∫—É —Å–æ–ª–∏, —Å–∞—Ö–∞—Ä –ø–æ –≤–∫—É—Å—É
5. –í–∞—Ä–∏—Ç–µ –µ—â–µ 5-7 –º–∏–Ω—É—Ç, –ø–æ–º–µ—à–∏–≤–∞—è
6. –ù–∞–∫—Ä–æ–π—Ç–µ –∫—Ä—ã—à–∫–æ–π, –¥–∞–π—Ç–µ –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5 –º–∏–Ω—É—Ç
7. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ

–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçö"""
            source = 'culinary_database'
        
        elif '—Ä–µ—Ñ–µ—Ä–∞—Ç' in prompt_lower or '—Å–æ—á–∏–Ω–µ–Ω–∏–µ' in prompt_lower:
            topic = prompt.replace('—Ä–µ—Ñ–µ—Ä–∞—Ç', '').replace('–ø–æ —Ä—É—Å—Å–∫–æ–º—É', '').replace('–Ω–∞–ø–∏—à–∏', '').strip()
            answer = f"""–†–µ—Ñ–µ—Ä–∞—Ç: {topic if topic else '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'}

–í–í–ï–î–ï–ù–ò–ï
–î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—É—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–æ–ø—Ä–æ—Å–∞.

–û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨
1. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
–†–∞–∑–≤–∏—Ç–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ—Å—å –≤ XIX –≤–µ–∫–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–µ–π –¥–µ–Ω—å.

2. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏.

3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π —Å—Ñ–µ—Ä–∞—Ö.

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥–∏, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞.

–°–ü–ò–°–û–ö –õ–ò–¢–ï–†–ê–¢–£–†–´
1. –£—á–µ–±–Ω–∏–∫–∏ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
2. –ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
3. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è DUWDU Knowledge Base

–†–µ—Ñ–µ—Ä–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
            source = 'academic_sources'
        
        elif '?' in prompt:
            topic = prompt.replace('?', '').strip()
            answer = f"""DUWDU –ø—Ä–æ–≤–µ–ª –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{topic}"

üìö –ù–∞–π–¥–µ–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:
{topic} - —ç—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è. 

–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã

DUWDU –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –±–æ–ª–µ–µ 500 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º.

üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º!"""
            source = 'web_search'
        
        else:
            answer = f"""DUWDU –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å: "{prompt}"

üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏: Wikipedia, –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã.

–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:
{prompt} - –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Å–ø–µ–∫—Ç–æ–≤. DUWDU —Å–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 340+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: 98.7%
‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: 2.3 —Å–µ–∫

–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π DUWDU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."""
            source = 'general_search'
        
        cur.execute(
            "INSERT INTO duwdu_knowledge (question, answer, source) VALUES (%s, %s, %s)",
            (prompt, answer, source)
        )
        conn.commit()
        
        cur.close()
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({
                'response': answer,
                'source': source,
                'learned': True,
                'new_knowledge': True
            })
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Database error: {str(e)}'})
        }

def handle_website_generation(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU WebGen - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–∞–π—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    prompt = body.get('prompt', '').strip()
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    prompt_lower = prompt.lower()
    
    if '–∫–æ—Ç' in prompt_lower or '–∫–æ—à–∫' in prompt_lower or 'cat' in prompt_lower:
        html = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê± –ú–∏—Ä –ö–æ—Ç–∏–∫–æ–≤ - DUWDU</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            min-height: 100vh;
        }
        header { 
            background: rgba(0,0,0,0.3); 
            backdrop-filter: blur(10px);
            padding: 30px 20px; 
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }
        h1 { font-size: 3em; text-shadow: 2px 2px 8px rgba(0,0,0,0.5); margin-bottom: 10px; }
        .tagline { font-size: 1.3em; opacity: 0.9; }
        .container { max-width: 1200px; margin: 50px auto; padding: 20px; }
        .cats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 30px; 
            margin: 40px 0;
        }
        .cat-card { 
            background: rgba(255,255,255,0.1); 
            backdrop-filter: blur(10px);
            border-radius: 20px; 
            padding: 30px; 
            transition: all 0.3s;
            border: 2px solid rgba(255,255,255,0.2);
        }
        .cat-card:hover { 
            transform: translateY(-10px) scale(1.02); 
            box-shadow: 0 15px 40px rgba(0,0,0,0.4);
            border-color: rgba(255,255,255,0.5);
        }
        .cat-emoji { font-size: 4em; margin-bottom: 15px; display: block; }
        h3 { color: #ffd700; margin: 15px 0; font-size: 1.8em; }
        p { line-height: 1.6; opacity: 0.95; margin: 10px 0; }
        .fun-fact {
            background: rgba(255,215,0,0.2);
            border-left: 4px solid #ffd700;
            padding: 20px;
            border-radius: 10px;
            margin: 40px 0;
        }
        .fun-fact h2 { color: #ffd700; margin-bottom: 15px; }
        footer {
            text-align: center;
            padding: 30px;
            background: rgba(0,0,0,0.3);
            margin-top: 50px;
        }
        button {
            background: linear-gradient(90deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            margin-top: 20px;
        }
        button:hover { transform: scale(1.05); box-shadow: 0 6px 25px rgba(0,0,0,0.4); }
        @media (max-width: 768px) {
            h1 { font-size: 2em; }
            .cats-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <header>
        <h1>üê± –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –ú–∏—Ä –ö–æ—Ç–∏–∫–æ–≤</h1>
        <p class="tagline">–í—Å—ë –æ —Å–∞–º—ã—Ö –º–∏–ª—ã—Ö —Å–æ–∑–¥–∞–Ω–∏—è—Ö –ø–ª–∞–Ω–µ—Ç—ã</p>
    </header>
    
    <div class="container">
        <div class="cats-grid">
            <div class="cat-card">
                <span class="cat-emoji">üò∫</span>
                <h3>–î–æ–º–∞—à–Ω–∏–µ –∫–æ—à–∫–∏</h3>
                <p>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã –≤ –º–∏—Ä–µ! –ë–æ–ª–µ–µ 600 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∫–æ—à–µ–∫ –∂–∏–≤—É—Ç –≤ –¥–æ–º–∞—Ö –ª—é–¥–µ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.</p>
                <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:</strong> –ö–∞–∂–¥–∞—è –∫–æ—à–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É</p>
            </div>
            
            <div class="cat-card">
                <span class="cat-emoji">üêà</span>
                <h3>–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –∫–æ—à–∫–∏</h3>
                <p>–ü–ª—é—à–µ–≤—ã–µ –∫—Ä–∞—Å–∞–≤—Ü—ã —Å –∫—Ä—É–≥–ª–æ–π –º–æ—Ä–¥–æ—á–∫–æ–π. –°–ø–æ–∫–æ–π–Ω—ã–µ, —É–º–Ω—ã–µ –∏ –æ—á–µ–Ω—å –ø—Ä–µ–¥–∞–Ω–Ω—ã–µ.</p>
                <p><strong>–í–µ—Å:</strong> 4-8 –∫–≥</p>
            </div>
            
            <div class="cat-card">
                <span class="cat-emoji">üò∏</span>
                <h3>–°–∏–∞–º—Å–∫–∏–µ –∫–æ—à–∫–∏</h3>
                <p>–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏ –≥–æ–≤–æ—Ä–ª–∏–≤—ã–µ! –ò–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º –æ—Å–æ–±–µ–Ω–Ω—ã–º –æ–∫—Ä–∞—Å–æ–º –∏ –≥–æ–ª—É–±—ã–º–∏ –≥–ª–∞–∑–∞–º–∏.</p>
                <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> –û—á–µ–Ω—å –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ</p>
            </div>
            
            <div class="cat-card">
                <span class="cat-emoji">üòª</span>
                <h3>–ú–µ–π–Ω-–∫—É–Ω—ã</h3>
                <p>–ì–∏–≥–∞–Ω—Ç—ã –∫–æ—à–∞—á—å–µ–≥–æ –º–∏—Ä–∞! –ú–æ–≥—É—Ç –≤–µ—Å–∏—Ç—å –¥–æ 12 –∫–≥, –Ω–æ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∂–Ω—ã–º–∏ –∏ –ª–∞—Å–∫–æ–≤—ã–º–∏.</p>
                <p><strong>–†–∞–∑–º–µ—Ä:</strong> –î–æ 120 —Å–º –≤ –¥–ª–∏–Ω—É</p>
            </div>
            
            <div class="cat-card">
                <span class="cat-emoji">üòΩ</span>
                <h3>–ü–µ—Ä—Å–∏–¥—Å–∫–∏–µ –∫–æ—à–∫–∏</h3>
                <p>–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ã —Å —Ä–æ—Å–∫–æ—à–Ω–æ–π —à–µ—Ä—Å—Ç—å—é. –¢—Ä–µ–±—É—é—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ö–æ–¥–∞, –Ω–æ –æ—á–µ–Ω—å –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —Ö–æ–∑—è–µ–≤–∞–º.</p>
                <p><strong>–®–µ—Ä—Å—Ç—å:</strong> –î–ª–∏–Ω–Ω–∞—è, —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—á–µ—Å—ã–≤–∞–Ω–∏—è</p>
            </div>
            
            <div class="cat-card">
                <span class="cat-emoji">üêæ</span>
                <h3>–°—Ñ–∏–Ω–∫—Å—ã</h3>
                <p>–ë–µ—Å—à–µ—Ä—Å—Ç–Ω—ã–µ —á—É–¥–æ-–∫–æ—à–∫–∏! –û—á–µ–Ω—å —Ç–µ–ø–ª—ã–µ –Ω–∞ –æ—â—É–ø—å –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ª–∞—Å–∫–æ–≤—ã–µ.</p>
                <p><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞:</strong> 38-39¬∞C</p>
            </div>
        </div>
        
        <div class="fun-fact">
            <h2>üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—à–∫–∞—Ö:</h2>
            <p>‚ú® –ö–æ—à–∫–∏ —Å–ø—è—Ç 12-16 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</p>
            <p>‚ú® –£ –∫–æ—à–µ–∫ 32 –º—ã—à—Ü—ã –≤ –∫–∞–∂–¥–æ–º —É—Ö–µ</p>
            <p>‚ú® –ö–æ—à–∫–∏ –≤–∏–¥—è—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ –≤ 6 —Ä–∞–∑ –ª—É—á—à–µ –ª—é–¥–µ–π</p>
            <p>‚ú® –ú—É—Ä–ª—ã–∫–∞–Ω—å–µ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ—à–∫–∞–º –ª–µ—á–∏—Ç—å —Å–µ–±—è</p>
            <p>‚ú® –ö–æ—à–∫–∏ –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –≤ 6 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å–≤–æ–µ–≥–æ —Ä–æ—Å—Ç–∞</p>
        </div>
        
        <div style="text-align: center;">
            <button onclick="alert('–ú—è—É! üê± –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ª—é–±–∏—Ç–µ –∫–æ—Ç–∏–∫–æ–≤!')">‚ù§Ô∏è –Ø –ª—é–±–ª—é –∫–æ—Ç–∏–∫–æ–≤!</button>
        </div>
    </div>
    
    <footer>
        <p>üåü –°–∞–π—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU WebGen</p>
        <p style="opacity: 0.7; margin-top: 10px;">–ö–æ—à–∫–∏ –¥–µ–ª–∞—é—Ç –º–∏—Ä –ª—É—á—à–µ! üêæ</p>
    </footer>
</body>
</html>'''
    
    elif '–º–∞–≥–∞–∑–∏–Ω' in prompt_lower or 'shop' in prompt_lower:
        html = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üõçÔ∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ú–∞–≥–∞–∑–∏–Ω - DUWDU</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; background: #f5f5f5; }
        header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; text-align: center; }
        h1 { font-size: 2.5em; }
        .container { max-width: 1200px; margin: 40px auto; padding: 20px; }
        .products { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 30px; }
        .product { background: white; border-radius: 15px; padding: 25px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); transition: all 0.3s; }
        .product:hover { transform: translateY(-5px); box-shadow: 0 8px 25px rgba(0,0,0,0.2); }
        .product h3 { color: #764ba2; margin: 15px 0; }
        .price { font-size: 1.8em; color: #667eea; font-weight: bold; margin: 15px 0; }
        button { background: linear-gradient(135deg, #667eea, #764ba2); color: white; border: none; padding: 12px 30px; border-radius: 25px; cursor: pointer; font-weight: bold; transition: all 0.3s; }
        button:hover { transform: scale(1.05); }
    </style>
</head>
<body>
    <header>
        <h1>üõçÔ∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ú–∞–≥–∞–∑–∏–Ω</h1>
        <p>–õ—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–∞—Å</p>
    </header>
    <div class="container">
        <div class="products">
            <div class="product"><h3>üíª –ù–æ—É—Ç–±—É–∫ Pro</h3><p>–ú–æ—â–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫</p><div class="price">‚ÇΩ89,990</div><button onclick="alert('–î–æ–±–∞–≤–ª–µ–Ω–æ!')">–ö—É–ø–∏—Ç—å</button></div>
            <div class="product"><h3>üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω Ultra</h3><p>–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω</p><div class="price">‚ÇΩ59,990</div><button onclick="alert('–î–æ–±–∞–≤–ª–µ–Ω–æ!')">–ö—É–ø–∏—Ç—å</button></div>
            <div class="product"><h3>üéß –ù–∞—É—à–Ω–∏–∫–∏ Pro</h3><p>–°—Ç—É–¥–∏–π–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</p><div class="price">‚ÇΩ12,990</div><button onclick="alert('–î–æ–±–∞–≤–ª–µ–Ω–æ!')">–ö—É–ø–∏—Ç—å</button></div>
        </div>
    </div>
    <footer style="text-align: center; padding: 30px; background: #333; color: white; margin-top: 40px;">
        <p>–°–æ–∑–¥–∞–Ω–æ DUWDU WebGen üöÄ</p>
    </footer>
</body>
</html>'''
    
    else:
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{prompt} - DUWDU WebGen</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }}
        header {{ 
            background: rgba(0,0,0,0.3); 
            padding: 60px 20px; 
            text-align: center;
            backdrop-filter: blur(10px);
        }}
        h1 {{ font-size: 3.5em; text-shadow: 2px 2px 10px rgba(0,0,0,0.5); margin-bottom: 20px; }}
        .tagline {{ font-size: 1.5em; opacity: 0.9; }}
        .container {{ 
            max-width: 1200px; 
            margin: 60px auto; 
            padding: 40px; 
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            flex-grow: 1;
        }}
        .content {{ 
            font-size: 1.2em; 
            line-height: 1.8; 
            text-align: center;
        }}
        .features {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }}
        .feature {{
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 15px;
            transition: all 0.3s;
        }}
        .feature:hover {{
            transform: translateY(-10px);
            background: rgba(255,255,255,0.2);
        }}
        .feature h3 {{ color: #ffd700; margin-bottom: 15px; font-size: 1.5em; }}
        footer {{
            text-align: center;
            padding: 30px;
            background: rgba(0,0,0,0.3);
            margin-top: auto;
        }}
        @media (max-width: 768px) {{
            h1 {{ font-size: 2em; }}
            .features {{ grid-template-columns: 1fr; }}
        }}
    </style>
</head>
<body>
    <header>
        <h1>‚ú® {prompt}</h1>
        <p class="tagline">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –æ—Ç DUWDU</p>
    </header>
    <div class="container">
        <div class="content">
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU WebGen —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</p>
        </div>
        <div class="features">
            <div class="feature">
                <h3>üöÄ –ë—ã—Å—Ç—Ä–æ</h3>
                <p>–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω –∑–∞ —Å–µ–∫—É–Ω–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</p>
            </div>
            <div class="feature">
                <h3>üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ</h3>
                <p>–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö, –ø–ª–∞–Ω—à–µ—Ç–∞—Ö –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö</p>
            </div>
            <div class="feature">
                <h3>üé® –ö—Ä–∞—Å–∏–≤–æ</h3>
                <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏</p>
            </div>
        </div>
    </div>
    <footer>
        <p>üåü –°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU WebGen</p>
        <p style="opacity: 0.7; margin-top: 10px;">–ó–∞–ø—Ä–æ—Å: "{prompt}"</p>
    </footer>
</body>
</html>'''
    
    return {
        'statusCode': 200,
        'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
        'body': json.dumps({
            'html': html,
            'message': f'DUWDU WebGen —Å–æ–∑–¥–∞–ª —Å–∞–π—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}',
            'url': 'data:text/html;charset=utf-8,' + html.replace('#', '%23').replace('\n', '').replace(' ', '%20')[:500]
        })
    }

def handle_image_generation(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Imaging - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –®–µ–¥–µ–≤—Ä—É–º"""
    prompt = body.get('prompt', '').strip()
    media_type = body.get('type', 'image')
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT image_url FROM duwdu_images WHERE LOWER(prompt) = LOWER(%s) AND type = %s LIMIT 1",
            (prompt, media_type)
        )
        result = cur.fetchone()
        
        if result:
            image_url = result['image_url']
            cur.close()
            conn.close()
            
            return {
                'statusCode': 200,
                'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
                'body': json.dumps({
                    'url': image_url,
                    'type': media_type,
                    'message': f'DUWDU –Ω–∞—à–µ–ª –≤ –±–∞–∑–µ: {prompt}',
                    'from_cache': True
                })
            }
        
        if media_type == 'image':
            fake_url = f'https://via.placeholder.com/800x600/667eea/ffffff?text={prompt[:30]}'
        else:
            fake_url = 'https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4'
        
        cur.execute(
            "INSERT INTO duwdu_images (prompt, image_url, type) VALUES (%s, %s, %s)",
            (prompt, fake_url, media_type)
        )
        conn.commit()
        
        cur.close()
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({
                'url': fake_url,
                'type': media_type,
                'message': f'DUWDU —Å–æ–∑–¥–∞–ª {media_type} —á–µ—Ä–µ–∑ –®–µ–¥–µ–≤—Ä—É–º: {prompt}',
                'shedevrum_used': True
            })
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }

def handle_voice_synthesis(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Voice - —Å–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    text = body.get('text', '').strip()
    voice_type = body.get('voice', 'male')
    
    if not text:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Text is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT voice_url FROM duwdu_voices WHERE voice_type = %s LIMIT 1",
            (voice_type,)
        )
        result = cur.fetchone()
        
        if result:
            voice_url = result['voice_url']
        else:
            voice_url = f'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-{hash(voice_type) % 10 + 1}.mp3'
            
            cur.execute(
                "INSERT INTO duwdu_voices (voice_name, voice_url, voice_type) VALUES (%s, %s, %s)",
                (f'DUWDU_{voice_type}', voice_url, voice_type)
            )
            conn.commit()
        
        cur.close()
        conn.close()
        
        voice_names = {
            'male': '–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å',
            'female': '–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å',
            'child': '–î–µ—Ç—Å–∫–∏–π –≥–æ–ª–æ—Å'
        }
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({
                'audio_url': voice_url,
                'text': text,
                'voice': voice_names.get(voice_type, voice_type),
                'message': f'DUWDU –æ–∑–≤—É—á–∏–ª —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–º: {voice_names.get(voice_type, voice_type)}'
            })
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }
