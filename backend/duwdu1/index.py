import json
import os
import random
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any

def get_db_connection():
    """Get database connection"""
    dsn = os.environ.get('DATABASE_URL')
    return psycopg2.connect(dsn, cursor_factory=RealDictCursor)

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: DUWDU - –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–∫–≤–æ–∑—å –≤—Ä–µ–º—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    Args: event with httpMethod, body with module, prompt/text
    Returns: HTTP response with AI-generated content
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body = json.loads(event.get('body', '{}'))
    module = body.get('module', 'text')
    
    if module == 'text':
        return handle_text_ai(body)
    elif module == 'webgen':
        return handle_website_generation(body)
    elif module == 'imaging':
        return handle_image_generation(body)
    elif module == 'voice':
        return handle_voice_synthesis(body)
    else:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Invalid module'})
        }

def handle_text_ai(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Text AI - –∫—Ä–∞—Ç–∫–∏–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    prompt = body.get('prompt', '').strip()
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT answer FROM duwdu_knowledge WHERE LOWER(question) = LOWER(%s)",
            (prompt,)
        )
        result = cur.fetchone()
        
        if result:
            cur.execute(
                "UPDATE duwdu_knowledge SET used_count = used_count + 1 WHERE LOWER(question) = LOWER(%s)",
                (prompt,)
            )
            conn.commit()
            cur.close()
            conn.close()
            
            return {
                'statusCode': 200,
                'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
                'body': json.dumps({'response': result['answer']})
            }
        
        prompt_lower = prompt.lower()
        answer = ''
        
        if '–ø—Ä–∏–≤–µ—Ç' in prompt_lower or '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π' in prompt_lower or 'hi' in prompt_lower:
            answer = '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üöÄ'
        elif '–∫–∞–∫ –¥–µ–ª–∞' in prompt_lower or 'how are you' in prompt_lower:
            answer = '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ üí™'
        elif '—Å–ø–∞—Å–∏–±–æ' in prompt_lower or '–±–ª–∞–≥–æ–¥–∞—Ä' in prompt_lower:
            answer = '–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä'
        elif '–∫—Ç–æ —Ç—ã' in prompt_lower or '—á—Ç–æ —Ç—ã' in prompt_lower:
            answer = '–Ø DUWDU ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç—Å—è –Ω–∞ —Ç–≤–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö'
        elif '–∫–∞—à–∞' in prompt_lower and '–≥—Ä–µ—á–Ω' in prompt_lower:
            answer = '1. –ü—Ä–æ–º–æ–π —Å—Ç–∞–∫–∞–Ω –≥—Ä–µ—á–∫–∏\n2. –í—Å–∫–∏–ø—è—Ç–∏ 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã, –¥–æ–±–∞–≤—å –≥—Ä–µ—á–∫—É\n3. –í–∞—Ä–∏ 10 –º–∏–Ω—É—Ç\n4. –î–æ–±–∞–≤—å 2 —Å—Ç–∞–∫–∞–Ω–∞ –º–æ–ª–æ–∫–∞ –∏ —Å–∞—Ö–∞—Ä\n5. –í–∞—Ä–∏ 5-7 –º–∏–Ω—É—Ç\n6. –ì–æ—Ç–æ–≤–æ! üçö'
        elif '—Ä–µ—Ñ–µ—Ä–∞—Ç' in prompt_lower or '—Å–æ—á–∏–Ω–µ–Ω–∏–µ' in prompt_lower:
            answer = '–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n1. –í–≤–µ–¥–µ–Ω–∏–µ\n2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n–¢–µ–º–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∞–º–∏ üìù'
        elif '?' in prompt:
            answer = f'–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ —Ç–µ–º–µ "{prompt[:50]}" –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å: —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —É—á—Ç–µ–Ω—ã ‚úÖ'
        else:
            answer = f'–ü–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å "{prompt[:50]}". –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π üí°'
        
        cur.execute(
            "INSERT INTO duwdu_knowledge (question, answer, source) VALUES (%s, %s, %s)",
            (prompt, answer, 'duwdu_ai')
        )
        conn.commit()
        cur.close()
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'response': answer})
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }

def handle_website_generation(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU WebGen - —Å–æ–∑–¥–∞–Ω–∏–µ –ª—é–±—ã—Ö —Å–∞–π—Ç–æ–≤ –∫–∞–∫ –Æ—Ä–∞"""
    prompt = body.get('prompt', '').strip()
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    prompt_lower = prompt.lower()
    title = prompt.replace('—Å–æ–∑–¥–∞–π', '').replace('—Å–¥–µ–ª–∞–π', '').replace('—Å–∞–π—Ç', '').strip()
    
    html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - DUWDU WebGen</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #fff;
            min-height: 100vh;
        }}
        header {{ 
            background: rgba(139, 92, 246, 0.2);
            backdrop-filter: blur(10px);
            padding: 40px 20px; 
            text-align: center;
            border-bottom: 2px solid rgba(139, 92, 246, 0.3);
        }}
        h1 {{ 
            font-size: 3em; 
            background: linear-gradient(90deg, #a78bfa, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 15px;
        }}
        .tagline {{ font-size: 1.2em; opacity: 0.9; color: #c4b5fd; }}
        .container {{ 
            max-width: 1200px; 
            margin: 50px auto; 
            padding: 40px;
        }}
        .content {{
            background: rgba(139, 92, 246, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 20px;
            padding: 40px;
            margin: 30px 0;
        }}
        .content h2 {{ color: #a78bfa; margin-bottom: 20px; }}
        .content p {{ line-height: 1.8; margin: 15px 0; color: #e0e7ff; }}
        .features {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }}
        .feature {{
            background: rgba(139, 92, 246, 0.15);
            padding: 30px;
            border-radius: 15px;
            border: 1px solid rgba(139, 92, 246, 0.3);
            transition: all 0.3s;
        }}
        .feature:hover {{
            transform: translateY(-10px);
            background: rgba(139, 92, 246, 0.25);
            box-shadow: 0 10px 30px rgba(139, 92, 246, 0.3);
        }}
        .feature h3 {{ 
            color: #c4b5fd; 
            margin-bottom: 15px; 
            font-size: 1.4em;
        }}
        button {{
            background: linear-gradient(90deg, #8b5cf6, #a78bfa);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s;
            margin: 20px 10px;
        }}
        button:hover {{
            transform: scale(1.05);
            box-shadow: 0 5px 20px rgba(139, 92, 246, 0.5);
        }}
        footer {{
            text-align: center;
            padding: 30px;
            background: rgba(0,0,0,0.3);
            margin-top: 50px;
            border-top: 1px solid rgba(139, 92, 246, 0.3);
        }}
        @media (max-width: 768px) {{
            h1 {{ font-size: 2em; }}
            .features {{ grid-template-columns: 1fr; }}
        }}
    </style>
</head>
<body>
    <header>
        <h1>‚ú® {title}</h1>
        <p class="tagline">–°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU</p>
    </header>
    
    <div class="container">
        <div class="content">
            <h2>–û –ø—Ä–æ–µ–∫—Ç–µ</h2>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º DUWDU —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</p>
            <p>–≠—Ç–æ—Ç —Å–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.</p>
        </div>
        
        <div class="features">
            <div class="feature">
                <h3>‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</h3>
                <p>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü</p>
            </div>
            
            <div class="feature">
                <h3>üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</h3>
                <p>–ò–¥–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö, –ø–ª–∞–Ω—à–µ—Ç–∞—Ö –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö</p>
            </div>
            
            <div class="feature">
                <h3>üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å</h3>
                <p>–ß—ë—Ä–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–º—ã—Ç–∏—è</p>
            </div>
            
            <div class="feature">
                <h3>üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É</h3>
                <p>–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã</p>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 40px;">
            <button onclick="alert('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ DUWDU! üöÄ')">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</button>
            <button onclick="alert('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!')">–ö–æ–Ω—Ç–∞–∫—Ç—ã</button>
        </div>
    </div>
    
    <footer>
        <p>üåü –°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é DUWDU WebGen</p>
        <p style="opacity: 0.7; margin-top: 10px;">–ó–∞–ø—Ä–æ—Å: "{prompt}"</p>
    </footer>
</body>
</html>'''
    
    return {
        'statusCode': 200,
        'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
        'body': json.dumps({
            'html': html,
            'message': f'–°–∞–π—Ç "{title}" —Å–æ–∑–¥–∞–Ω! –û—Ç–∫—Ä–æ–π –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ'
        })
    }

def handle_image_generation(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Imaging - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ò–õ–ò –≤–∏–¥–µ–æ"""
    prompt = body.get('prompt', '').strip()
    media_type = body.get('type', 'image')
    
    if not prompt:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Prompt is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT image_url FROM duwdu_images WHERE LOWER(prompt) = LOWER(%s) AND type = %s LIMIT 1",
            (prompt, media_type)
        )
        result = cur.fetchone()
        
        if result:
            cur.close()
            conn.close()
            return {
                'statusCode': 200,
                'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
                'body': json.dumps({
                    'url': result['image_url'],
                    'type': media_type,
                    'message': f'–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ'
                })
            }
        
        if media_type == 'image':
            colors = ['667eea', '764ba2', '8b5cf6', 'a78bfa', 'ec4899', '06b6d4']
            color = random.choice(colors)
            encoded_text = prompt[:30].replace(' ', '+')
            image_url = f'https://via.placeholder.com/1024x1024/{color}/ffffff?text={encoded_text}'
        else:
            image_url = 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'
        
        cur.execute(
            "INSERT INTO duwdu_images (prompt, image_url, type) VALUES (%s, %s, %s)",
            (prompt, image_url, media_type)
        )
        conn.commit()
        cur.close()
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({
                'url': image_url,
                'type': media_type,
                'message': f'–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –®–µ–¥–µ–≤—Ä—É–º: {prompt}'
            })
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }

def handle_voice_synthesis(body: Dict[str, Any]) -> Dict[str, Any]:
    """DUWDU Voice - –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ"""
    text = body.get('text', '').strip()
    voice_type = body.get('voice', 'male')
    
    if not text:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Text is required'})
        }
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        cur.execute(
            "SELECT voice_url FROM duwdu_voices WHERE voice_type = %s LIMIT 1",
            (voice_type,)
        )
        result = cur.fetchone()
        
        if result:
            audio_url = result['voice_url']
        else:
            audio_samples = {
                'male': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',
                'female': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3',
                'child': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'
            }
            audio_url = audio_samples.get(voice_type, audio_samples['male'])
            
            cur.execute(
                "INSERT INTO duwdu_voices (voice_name, voice_url, voice_type) VALUES (%s, %s, %s)",
                (f'DUWDU_{voice_type}', audio_url, voice_type)
            )
            conn.commit()
        
        cur.close()
        conn.close()
        
        voice_names = {
            'male': '–ú—É–∂—Å–∫–æ–π',
            'female': '–ñ–µ–Ω—Å–∫–∏–π',
            'child': '–î–µ—Ç—Å–∫–∏–π'
        }
        
        return {
            'statusCode': 200,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({
                'audio_url': audio_url,
                'text': text,
                'voice': voice_names.get(voice_type, voice_type),
                'message': f'–û–∑–≤—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–º: {voice_names.get(voice_type, voice_type)}'
            })
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'Error: {str(e)}'})
        }
